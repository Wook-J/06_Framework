----[프로그램 설계 원칙]----

1. 제시된 모든 개체(Entity)에 대하여 저장 가능한 
   데이터베이스 테이블을 구현해야 한다.

2. 제시된 모든 개체(Entity)에 대하여 데이터베이스  테이블의
   데이터 1개 행을 가져올 수 있는 DTO 클래스가 존재해야 한다.

3. 제시된 모든 개체(Entity)에 대하여 CRUD 작업을 수행할 수 
   있는 주소 처리가 된 Controller클래스를 만들어야 한다.

- 컨트롤러마다 고유한 공용 주소부분이 있어야 하며 개체(Entity)
   이름을 "소문자"로 작성한 값으로 정하여 공용주소를 만들어야 한다.

- CRUD 작업은 총 4가지이며, 등록(Create)/목록(Read)/수정(Update)
   /삭제(Delete)를 의미한다. 해당 주소는 공용주소에 결합하여 만들어야 한다.

- 등록 주소는 /regist 로 끝나야 한다.

- 목록 주소는 /list로 끝나야 한다.

- 수정 주소는 /update로 끝나야 한다.

- 삭제 주소는 /delete로 끝나야 한다.

4. 제시된 모든 개체(Entity)에 대하여 비즈니스 로직을 처리할 수 있는 Service 와 
   데이터베이스 처리를 수행할 수 있는 Mapper가 존재해야 한다.

5. 모든 생성되는 클래스의 이름은 정해진 규칙에 의해서 만들어져야 한다.

----[클래스 이름 설계 원칙]----
클래스 이름, 컨트롤러 이름, 서비스 이름, 매퍼 이름, DTO 이름

----[테이블 및 컬럼 이름 설계 원칙]----
테이블 이름, 컬럼 이름(대문자 + 언더스코어) : 숫자 사용 불가
사람이름은 한글 5글자까지
숫자 (number), 문자열(nvarchar2, 글자수를 기준으로 크기 산정)
번호가 기본키 + 모든 항목 반드시 존재
문자열 크기 언급없을 시 한글 20글자

----[변수명 설계 원칙]----
소문자 알파벳으로 시작
DTO 변수 이름은 해당 개체의 테이블 컬럼이름과 동일하게 작성 + 카멜표기법
데이트베이스 컬럼의 Date 타입은 String형태로 보관

[테이블 생성 구문]
CREATE TABLE "product" (		-> [테이블 및 컬럼 이름 설계 원칙 1. 위배]
PRODUCT_NUMBER NUMBER PRIMARY KEY,
PRODUCT_NAME NVARCHAR2(10),	-> [테이블 및 컬럼 이름 설계 원칙 9. 위배]
PRODUCT_PRICE NUMBER,		-> [사람 이름 아니어서 20글자로 정하기]
PRODUCT_REGIST_DATE DATE,
TOTAL_SELL_COUNT NUMBER
);

[컨트롤러]
@Controller			-> [프로그램 설계 원칙 3. 첫번째 - 위배]
@RequiredArgsConstructor		-> @RequestMapping("product") 없음
public class ProductController {
  private final ProductService service;

  @RequestMapping("regist")
  public String regist() {
    return service.regist();
  }

  @RequestMapping("list")
  public String list() {
    return service.list();
  }

  @RequestMapping("update")
  public String update() {
    return service.update();
  }

  @RequestMapping("delete")
  public String delete() {
    return service.delete();
  }
}

-> [프로그램 설계 원칙 4. 위배 : mapper에서 int 형으로 반환 되어 처리해야 함]
-> [목록 조회의 경우 DTO를 받아야 함]
[서비스]				-> [프로그램 설계 원칙 4. 위배 -> 문제 오류]
@RequiredArgsConstructor		-> @Service 어노테이션 없음
public class ProductService {
  private final ProductMapper mapper;

  public String regist() {
    return mapper.regist();
  }

  public String list() {
    return mapper.list();
  }

  public String update() {
    return mapper.update();
  }

  public String delete() {
    return mapper.delete();
  }
}

[매퍼]
@Mapper
public interface ProductMapper {
  String regist();
  String list();
  String update();
  String delete();
}

[DTO]
@Getter
@Setter
@NoArgsConstructor
public class ProductDTO {
  private int productNumber;
  private String productName;
  private int productPrice;
  private Date productRegistDate;	-> [변수명 설계 원칙 4. 위배]
  private int totalSellCount;
}