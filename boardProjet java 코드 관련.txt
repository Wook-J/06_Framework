0. BoardProjectBootApplication : @SpringBootApplication(exclude={SecurityAutoConfiguration.class})

0. common
  (1) config
    1) DBConfig : @Configuration, @PropertySource("classpath:/config.properties")
      - 필드 : ApplicationContext
      - 메서드 : HikariCP, MyBatis 설정 부분 (+config.properties)
    2) EmailConfig : @Configuration, @PropertySource("classpath:/config.properties")
      - 필드 : userName, password (+config.properties)
      - 메서드 : Google SMTP 설정 부분
    3) SecurityConfig : @Configuration
      - BCrypt 설정 부분
    4) FileConfig : @Configuration, @PropertySource("classpath:/config.properties")
      - 필드 1 : fileSizeThreshold, maxRequestSize, maxFileSize, location, 
      - 필드 2 : profileResourceHandler, profileResourceLocation
      - 필드 3 : boardResourceHandler, boardResourceLocation
      - 메서드 : 파일 크기, 이미지 경로, MultiPartResolover 설정부분 (+config.properties)
    5) FilterConfig : @Configuration
      - 메서드 : LoginFilter와 함께 필터링 되는 주소 설정
    6) InterceptorConfig : @Configuration
      - 메서드 : BoardTypeInterceptor와 함께 가로챌 요청 주소 설정
  (2) filter
    1) LoginFilter
      - 메서드 : 로그인 되어 있지 않은 경우 특정페이지로 이동
  (3) interceptor
    1) BoardTypeInterceptor : implements HandlerInterceptor
      - 필드 : BoardService
      - 메서드 : 전처리(수업에선 여기만 함), 후처리, 뷰완성후 처리를 수행하는 부분
  (4) util
    1) Utility
      - 필드 : seqNum
      - 메서드 : fileRename

1. main.controller : @Controller
      - 메인페이지 이동 : @RequestMapping
      - loginError : @GetMapping

2. email
  (1) controller
    1) EmailController : @Controller, @RequestMapping("email"), @RequiredArgsConstructor
      - 필드 : EmailService
      - signup : @ResponseBody, @PostMapping
      - checkAuthKey : @ResponseBody, @PostMapping
  (2) model.service
    1) EmailServiceImpl : @Service, @RequiredArgsConstructor
      - 필드 : EmailMapper, JavaMailSender, SpringTemplateEngine
      - 이메일 보내기 : createAuthKey( ), storeAuthKey( ), loadHtml( )
      - 인증키 확인
  (3) model.mapper
    1) EmailMapper : @Mapper (+ email-mapper.xml 에서 관련 구문 설명)
      - 기존 이메일에 대한 인증키를 DB에서 수정
      - 이메일과 인증키를 DB에 삽입
      - 입력받은 이메일과 인증키가 DB에 있는지 조회

3. member
  (1) controller
    1) MemberController : @SessionAttributes({"loginMember"}), @Controller, @RequestMapping("member")
      - 필드 : MemberService
      - 로그인 : @PostMapping, inputMember, Model, @RequestParam(value="saveId", required=false, ra, resp)
      - 로그아웃 : @GetMapping, SessionStatus
      - 회원가입페이지 이동 : @GetMapping
      - 이메일 중복검사 : @ResponseBody, @GetMapping,
      - 닉네임 중복검사 : @ResponseBody, @GetMapping, @RequestParam("memberNickname")
      - 회원가입 : @PostMapping, inputMember, @RequestParam("memberAddress"), ra
      - (비동기 연습문제) 회원목록조회, 특정회원비밀번호초기화, 탈퇴한 회원복구
  (2) model.service : 
    1) MemberService : interface
    2) MemberServiceImpl : @Service, @Transactional(rollbackFor=Exception.class)
      - 필드 : MemberMapper, BCryptPasswordEncoder
      - 로그인
      - 이메일 중복검사
      - 닉네임 중복검사
      - 회원가입
      - (비동기 연습문제) 회원목록조회, 특정회원비밀번호초기화, 탈퇴한 회원복구
  (3) model.mapper
    1) MemberMapper : @Mapper (+ member-mapper.xml 에서 관련 구문 설명)
      - 로그인
      - 이메일 중복검사
      - 닉네임 중복검사
      - 회원가입
      - (비동기 연습문제) 회원목록조회, 특정회원비밀번호초기화, 탈퇴한 회원복구
  (4) model.dto
    1) Member : @Getter, @Setter, @ToString, @NoArgsConstructor, @AllArgsConstructor, @Builder
      - DB의 MEMBER TABLE에 있는 컬럼명

4. myPage
  (1) controller
    1) MyPageController : @SessionAttributes({"loginMember"}), @Controller, @RequestMapping("myPage"), @RequiredArgsConstructor
      - 필드 : MyPageService
      - 마이페이지 기본정보 화면 이동 : @GetMapping, @SessionAttribute("loginMember"), Model
      - 프로필 이미지 변경화면 이동 : @GetMapping
      - 비밀번호 변경 화면 이동 : @GetMapping
      - 회원탈퇴 화면 이동 : @GetMapping
      - 파일 업로드 테스트 화면 이동: @GetMapping
      - 파일 목록 조회 및 응답화면 이동 : @GetMapping, @SessionAttribute("loginMember"), Model
      - 회원정보 수정 : @PostMapping, @SessionAttribute("loginMember"), updateMember, @RequestParam("memberAddress"), ra
      - 비밀번호 변경 : @PostMapping, @SessionAttribute("loginMember"), @RequestParam Map, ra
      - 회원 탈퇴 : @PostMapping, @SessionAttribute("loginMember"), @RequestParam("memberPw"), SessionStatus, ra
      - 파일테스트 1 : @PostMapping, @RequestParam("uploadFile"), ra
      - 파일테스트 2 : @PostMapping, @SessionAttribute("loginMember"), @RequestParam("uploadFile"), ra
      - 파일테스트 3 : @PostMapping, @SessionAttribute("loginMember"), @RequestParam("aaa"), @RequestParam("bbb")ra
      - 프로필 이미지 변경 : @PostMapping, @SessionAttribute("loginMember"), @RequestParam("profileImg"), ra
  (2) model.service
    1) MyPageService : interface
    2) MyPageServiceImpl : @Service, @Transactional(rollbackFor=Exception.class), @RequiredArgsConstructor, @PropertySource("classpath:/config.properties")
      - 필드 : MyPageMapper, BCryptPasswordEncoder, profileWebPath, profileFolderPath
      - 회원정보 수정
      - 비밀번호 변경
      - 회원탈퇴
      - 파일테스트 1
      - 파일테스트 2
      - 파일 목록 조회
      - 파일테스트 3
      - 프로필 이미지 변경
  (3) model.mapper
    1) MyPageMapper : @Mapper (+ myPage-mapper.xml 에서 관련 구문 설명)
      - 회원정보 수정
      - 기존 회원의 암호화된 비밀번호 조회
      - 기존 회원의 비밀번호 변경
      - 회원탈퇴
      - DB에 파일정보 삽입
      - 파일 목록 조회
      - 프로필 이미지 변경
  (4) model.dto
    1) UploadFile : @Getter, @Setter, @ToString, @NoArgsConstructor, @AllArgsConstructor, @Builder
      - DB의 UPLOAD_FILE TABLE에 있는 컬럼명
      - memberNickname

5. board
  (1) controller
    1) BoardController : @Controller, @RequestMapping("board"), @RequiredArgsConstructor
      - 필드 : BoardService
      - 게시글 목록 조회 : @GetMapping, @PathVariable("boardCode"), @RequestParam(value="cp", required=false, defaultValue="1"), model
      - 게시글 상세 조회 : @GetMapping, @SessionAttribute(value="loginMember", required = false), @PathVariable("boardCode"), @PathVariable("boardNo"), model, req, resp, ra
      - 게시글 좋아요 체크/해제 : @ResponseBody, @PostMapping, @RequestBody Map<String, Integer>
    2) CommentController : @RestController, @RequestMapping("comment"), @RequiredArgsConstructor
      - 필드 : CommentService
      - 댓글 목록 조회 : @GetMapping("")
      - 댓글/답글 등록 : @PostMapping("")
      - 댓글/답글 삭제 : @DeleteMapping("")
      - 댓글/답글 수정 : @PutMapping("")
    3) EditBoardController : @Controller, @RequestMapping("editBoard"), @RequiredArgsConstructor
      - 필드 : EditBoardService, BoardService
      - 게시글 화면 전환 : @GetMapping("{boardCode:[0-9]+}/insert"), @PathVariable("boardCode")
      - 게시글 작성 : @PostMapping("{boardCode:[0-9]+}/insert"), @SessionAttribute("loginMember"), @PathVariable("boardCode"), Board inputBoard, @RequestParam("images"), ra
      - 게시글 수정 화면 전환 : @GetMapping("{boardCode:[0-9]+}/{boardNo:[0-9]+}/update"), @SessionAttribute("loginMember"), @PathVariable("boardCode"), @PathVariable("boardNo"), model, ra
      - 게시글 수정 : @PostMapping("{boardCode:[0-9]+}/{boardNo:[0-9]+}/update"), @SessionAttribute("loginMember"), @PathVariable("boardCode"), @PathVariable("boardNo"), Board,
		@RequestParam("images"), @RequestParam(value="deleteOrderList", required=false), @RequestParam(value="cp", required=false, defaultValue="1"), ra
  (2) model.service
    1) BoardService : interface
    2) CommentService : interface
    3) EditBoardService : interface
    4) BoardServiceImpl : @Service, @Transactional(rollbackFor = Exception.class), @RequiredArgsConstructor
      - 필드 : BoardMapper
      - 게시판 종류 조회(BoardTypeInterceptor에서 사용)
      - 특정 게시판에 지정된 페이지 목록 조회(Pagination DTO 사용)
      - 게시글 상세 조회
      - 게시글 좋아요 체크/해제
      - 조회 수 1 증가
    5) CommentServiceImpl : @Service, @Transactional(rollbackFor = Exception.class), @RequiredArgsConstructor
      - 필드 : CommentMapper
      - 댓글 목록 조회
      - 댓글/답글 등록
      - 댓글/답글 삭제
      - 댓글/답글 수정
    6) EditBoardServiceImpl : @Service, @Transactional(rollbackFor=Exception.class), @RequiredArgsConstructor, @PropertySource("classpath:/config.properties")
      - 필드 : EditBoardMapper, webPath, folderPath
      - 게시글 작성 (아주 어려움)
      - 게시글 수정 (아주 어려움)
  (3) model.mapper
    1) BoardMapper : @Mapper (+ board-mapper.xml 에서 관련 구문 설명)
      - 게시판 종류 조회
      - 게시글 수 조회
      - 특정 게시판에 지정된 페이지 목록 조회
      - 게시글 상세 조회
      - 좋아요 해제/체크, 게시글 좋아요 개수 조회
      - 조회 수 1 증가, 조회 수 조회
    2) CommentMapper : @Mapper (+ comment-mapper.xml 에서 관련 구문 설명)
      - 댓글 목록 조회
      - 댓글/답글 등록
      - 댓글/답글 삭제
      - 댓글/답글 수정
    3) EditBoardMapper : @Mapper (+ edit-board-mapper.xml 에서 관련 구문 설명)
      - 게시글 작성
      - 게시글 이미지 모두 삽입
      - 게시글 부분(제목/내용) 수정
      - 게시글 이미지 삭제
      - 게시글 이미지 수정
      - 게시글 이미지 삽입(1행)
  (4) model.dto
    1) Board : @Getter, @Setter, @ToString, @NoArgsConstructor, @AllArgsConstructor, @Builder
      - DB의 BOARD TABLE 에 있는 컬럼명
      - DB의 MEMBER TABLE JOIN(MEMBER_NICKNAME, PROFILE_IMG)
      - 목록 조회 시 상관쿼리 결과
      - DB의 BOARD_IMG TABLE 과 JOIN (IMG_ORDER == 0 인 경우 썸네일)
      - 게시글 상세 조회 시 필요한 변수 (imageList, commentList, likeCheck)
    2) BoardImg : @Getter, @Setter, @ToString, @NoArgsConstructor, @AllArgsConstructor, @Builder
      - DB의 BOARD_IMG TABLE 에 있는 컬럼명
    3) Comment : @Getter, @Setter, @ToString, @NoArgsConstructor, @AllArgsConstructor, @Builder
      - DB의 COMMENT TABLE 에 있는 컬럼명
      - 댓글 작성한 사람, 이미지 조회 시 필요한 변수(memberNickname, profileImg)
    4) Pagination
      - 필드 1 : currentPage, listCount, limit, pageSize
      - 필드 2 : maxPage, startPage, endPage, prevPage, nextPage
      - 매개변수 생성자 1 : public Pagination(int currentPage, int listCount) { }
      - 매개변수 생성자 2 : public Pagination(int currentPage, int listCount, int limit, int pageSize) { }
      - getter 9개, setter 4개, toString
      - calculate ( )

★src/main/java/edu.kh.project
board -> 넣음
common -> 넣음
email -> 넣음
main.controller -> 넣음
member -> 넣음
mypage -> 넣음
BoardProjectBootApplication -> 넣음

★src/main/resources
mappers -> ###Mapper 와 연동
templates
static
application.properties
config.properties
messages.properties
mybatis-config.xml