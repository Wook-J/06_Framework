암호화
평문 : pass01 -> 12GR2323!!%^!@$@#%^!

해시(hash) 알고리즘을 사용하여 암호화 진행!!!
-> 데이터를 고정된 길이의 해시값(고유한 문자열) 으로 변환하는 알고리즘

SHA256, SHA512 -> 문제점
(예시)
A회원 : abc123   ->   qwe123
B회원 : abc123   ->   qwe123

레인보우 테이블로 비밀번호를 복구하기가 쉬움...!!
---------------------------------------------------------------------------------

bcrypt 방식 : 해시 과정에서 소금을 침!
salt과정 : 같은 비밀번호라도 매번 다른 해시값이 생성되도록 함
(예시)
A회원 : abc123   ->   1234sdwe!#@%#
B회원 : abc123   ->   234sed@#SEG23

BcryptPasswordEncoder : Spring Security 에서 비밀번호를 안전하게 암호화하는데 사용하는 클래스

---------------------------------------------------------------------------------

캐시/쿠키/세션

캐시(Cache) : 자주 쓰는 데이터를 임시로 저장해두는 공간
-> 자주 방문하는 사이트의 이미지, CSS, JS 파일 등을 캐시에 저장
-> 다시 방문할 때 서버에서 새로 받지 않고, 캐시에 저장된 파일을 불러와 재사용
-> 웹 사이트 로딩 속도 빠르게 하기 위해 사용
-> 조작 : 클라이언트와 서버 모두 가능

쿠키(Cookie) : 웹 사이트가 사용자의 브라우저에 저장하는 작은 데이터 조각
-> 로그인한 정보 유지, 사용자 설정 저장, 방문 기록 등을 관리하기 위해 사용
-> 내가 사용했던 이메일/아이디 저장, 장바구니 정보가 쿠키를 통해 저장됨
-> 조작 : 클라이언트와 서버 모두 가능

세션(Session) : 서버가 클라이언트별로 상태를 유지하기 위해 서버에 저장하는 데이터
-> 로그인 정보를 안전하게 서버에서 관리해서, 브라우저를 닫아도 세션이 유지됨
-> 채팅 구현 시 세션별로 관리하여 구현됨 (웹소켓 이용할 때...??)
-> 조작 : 서버만 가능, 클라이언트는 세션ID 만 간적접으로 확인 가능 (JSESSIONID 확인)