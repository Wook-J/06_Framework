
/*
 * Aspect-Oriented Programming 의 약자로, 분산되어 있는 관심사/관점을 모듈화 시키는 기법
 * 
 * - 주요 비즈니스 로직과 관련이 없는 부가적인 기능을 추가할 때 유용
 * 
 * ex) 코드 중간 중간에 로그 찍을 때, 트랜잭션 처리하고 싶을 때 등
 * 
 * 주요 어노테이션
 * - @Aspect : Aspect를 정의하는데 사용되는 어노테이션으로, 클래스 상단에 작성함
 * - @Before(포인트컷) : 대상 메서드(포인트컷) 실행 전에 Advice를 실행함.
 * - @After(포인트컷)  : 대상 메서드 실행 후에 Advice를 실행함.
 * - @Around(포인트컷) : 대상 메서드 실행 전/후로 Advice를 실행함 (@Before + @After)
 *
 * 
 * */	

--------------------------------------------------------------------------------------

// Advice : 끼워 넣을 코드(메서드)
// Pointcut : 실제로 Advice를 적용할 JoinPoint (지점)
	
// <Pointcut 작성 방법>
// execution( [접근제한자] 리턴타입 클래스명 메서드명 ([파라미터]) )
// * 클래스명은 패키지명부터 모두 작성

--------------------------------------------------------------------------------------

// ProceedingJoinPoint 
// - JoinPoint 상속한 자식 객체
// - @Around 에서 사용 가능
// - proceed() 메서드 제공
// ->  proceed() 메서드 호출 전/후로
//     Before/After가 구분되어짐
	
// * 주의할 점 *
// 1) @Around 사용 시 반환형 Object
// 2) @Around 메서드 종료 시 proceed() 반환 값을 return  해야한다
	
--------------------------------------------------------------------------------------


/** 접속자 IP 얻어오는 메서드
 * @param request
* @return ip
 */
private String getRemoteAddr(HttpServletRequest request) {

	String ip = null;

	ip = request.getHeader("X-Forwarded-For");

	if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
		ip = request.getHeader("Proxy-Client-IP");
	}

	if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
		ip = request.getHeader("WL-Proxy-Client-IP");
	}

	if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
		ip = request.getHeader("HTTP_CLIENT_IP");
	}

	if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
		ip = request.getHeader("HTTP_X_FORWARDED_FOR");
	}

	if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
		ip = request.getHeader("X-Real-IP");
	}

	if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
		ip = request.getHeader("X-RealIP");
	}

	if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
		ip = request.getHeader("REMOTE_ADDR");
	}

	if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
		ip = request.getRemoteAddr();
	}

	return ip;
}