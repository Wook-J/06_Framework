TodoList 구조
(★) src/main/java : 자바코드를 모아두는 패키지
  1. edu.kh.todo
    (1) common
      1) config
        - DBConfig.java
┌------DBConfig 코드 모음----------------------------------------------------------------------------┐
@Configuration						설정용 클래스임을 명시 (바로 실행)
@PropertySource("classpath:/config.properties")			지정된 경로의 properties 파일 읽어와 사용
public class DBConfig {

  @Autowired						의존성 주입(DI)
  private ApplicationContext applicationContext;			application scope 객체

  @Bean
  @ConfigurationProperties(prefix = "spring.datasource.hikari")	prefix로 시작하는 모든 값을
  public HikariConfig hikariConfig() {				자동으로 알맞은 필드에 세팅
    return new HikariConfig();
  }

  @Bean
  public DataSource dataSource(HikariConfig config) {		DB 연결 시 설정
    DataSource dataSource = new HikariDataSource(config);	DB 연결정보 제공, CP/트랜젝션 관리
    return dataSource;
  }

  @Bean							SqlSessionFactory : SqlSession을 만드는 객체
  public SqlSessionFactory sessionFactory(DataSource dataSource) throws Exception{

    SqlSessionFactoryBean sessionFactoryBean = new SqlSessionFactoryBean();		
    sessionFactoryBean.setDataSource(dataSource);
		
    // *** sessionFactoryBean이라는 공장에 MyBatis를 이용하기 위한 세팅 ***
    // 세팅 1. mapper.xml (SQL 작성해둘 파일) 파일이 모여있는 경로 지정
    sessionFactoryBean.setMapperLocations(applicationContext.getResources("classpath:/mappers/**.xml"));
    // 세팅 2. 해당 패키지 내 모든 클래스의 별칭 등록(편의성 향상, 클래스명 안겹치게 주의)
    sessionFactoryBean.setTypeAliasesPackage("edu.kh.todo");
    // 세팅 3. MyBatis 설정 파일 경로 지정
    sessionFactoryBean.setConfigLocation(applicationContext.getResource("classpath:/mybatis-config.xml"));
    return sessionFactoryBean.getObject();			SqlSession 객체 반환
  }

  @Bean				SqlSessionTemplate : Connection + DBCP + Myatis + 트랜젝션 처리
  public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sessionFactory) {
    return new SqlSessionTemplate(sessionFactory);		
  }

  @Bean							트랜젝션 매니져
  public DataSourceTransactionManager dataSourceTransactionManager(DataSource dataSource) {
    return new DataSourceTransactionManager(dataSource);
  }
}

└------------------------------------------------------------------------------------------------------┘
    (2) controller : 클라이언트의 요청을 처리하기 위해 맨처음 만나는 코드 모음
	주요 할 일 : 서비스에서 알맞은 메서드 호출, 메세지 세팅
	클래스 단 : @Controller, @RequestMapping("요청주소")
	필드, 메서드 단 : @Autowired, @GetMapping("추가주소"), @PostMapping("추가주소")
		@RequestParam("이름") 자료형 이름, @ModelAttribute(생략가능) 자료형 이름
		RedirectAttributes ra(1회성으로 session scope으로 바꿔주는 객체)
		(-> ra.addFlashAttribute("key", value) 형식으로 세팅 가능)
	(리턴 구문 참조) classpath:/templates/ ~~~ .html
    (3) model
      1) dao : DB에 가장 가까운 패키지 모음, STS부터는 안씀(mapper가 대체)
	클래스 단 : @Repository
	메서드 단 : @Autowired
      2) dto : 객체를 뽑아오기 위해 필요한 변수 선언하는 부분
	클래스 단 : @Getter, @Setter, @ToString, @NoArgsConstructor, @AllArgsConstructor
      3) mapper : MyBatis 가 해당 인터페이스를 DAO로 인식하여 SQL 매핑 처리
	클래스 단 : @Mapper
      4) service : 데이터를 가공(MyBatis는 파라미터1개만 전달 가능)하여 mapper 호출
    (4) TodoListApplication.java : 서버실행을 위해 있어야 하는 자바코드

(★) src/main/resources : 자바코드외 전반적인 파일을 모아두는 패키지
  1. mappers : SQL문을 모아두는 폴더 (mybatis 이용하므로 초기세팅 시 XML -> XML Catalog에서 설정 필요)

┌------- todo-mapper.xml 주요 코드---------------------------------------------------------------┐
   <?xml version="1.0" encoding="UTF-8"?>
   <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
   <mapper namespace="edu.kh.todo.model.mapper.TodoMapper">
     <select id="testTitle" resultType="string">			id : 연결된 Mapper의 메서드명과 동일하게 작성
	SELECT TODO_TITLE FROM TB_TODO			parameterType : 들어오는 변수 타입
	WHERE TODO_NO = 1				resultType : 결과 타입
     </select>

     <select id="selectAll" resultType="Todo" >
	SELECT 
		TODO_NO,
		TODO_TITLE,
		COMPLETE,
		TO_CHAR(REG_DATE, 'YYYY-MM-DD HH24:MI:SS') "REG_DATE" 
	FROM TB_TODO
	ORDER BY TODO_NO
     </select>
     <!-- mapper.xml 에서 java data(파라미터)를 SQL에 삽입하는 방법
	1) #{변수명 | 필드명} : SQL 삽입 시 양쪽에 홑따옴표(') 붙음
	2) ${변수명 | 필드명} : SQL 삽입 시 양쪽에 홑따옴표(') 안 붙음
     -->
								(DBConfig.java에서 세팅함!)
     <insert id="addTodo" parameterType="edu.kh.todo.model.dto.Todo">	이 때 Todo만 써도 가능!
	INSERT INTO TB_TODO
	VALUES(SEQ_TODO_NO.NEXTVAL, #{todoTitle}, #{todoContent}, DEFAULT, DEFAULT)
     </insert>

     <select id="todoDetail" parameterType="_int" resultType="Todo">
	SELECT 
		TODO_NO,
		TODO_TITLE,
		TODO_CONTENT,
		COMPLETE,
		TO_CHAR(REG_DATE, 'YYYY-MM-DD HH24:MI:SS') "REG_DATE" 
	FROM TB_TODO
	WHERE TODO_NO = ${todoNo}
     </select>

     <delete id="deleteTodo" parameterType="_int">
	DELETE FROM TB_TODO
	WHERE TODO_NO = ${todoNo}
     </delete>
   </mapper>
└----------------------------------------------------------------------------------------------------┘

  2. templates : controller와 매핑된 html파일을 모아두는 폴더(thymeleaf 문법 사용)
    (1) common : 흔히 사용되는 부분(main.html, footer.html)
    (2) todo : 세부사항을 나타내는 부분(detail.html, update.html)

┌----------------------------------------------------------------------------------------------------┐
   (맨 앞부분) <html lang="en" xmlns:th="http://www.thymeleaf.org">
   (head 내부) <link rel="stylesheet" href="/css/main.css"> (classpath:/static 폴더 기준)
   (body 내부 끝부분) <script src="/js/main.js"></script>   (classpath:/static 폴더 기준)
└----------------------------------------------------------------------------------------------------┘

┌--------(body 내부) 주요 문법---------------------------------------------------------------------┐
   <li><a href="/example/ex1">타임리프 예제1</a></li>		a태그는 get방식

   <form action="/example/ex2" method="post"></form> 	form태그는 method 수정 가능

   <h4 th:text="${test1}">test1 값</h4>	spring EL형식	${key} : 변수, model 등으로 세팅

   <th:block th:text="${productName}">상품명</th:block>		th:block 텍스트 해석 후 사라짐

   <li th:text="${fruitList[0]}">0번 인덱스 과일</li>		list여도 배열표기법으로 추출 가능

   <th:block th:each="fruit : ${fruitList}">			fruit 자유, ${List명}
     <li th:text="${fruit}">과일명</li>
   </th:block>

   <li th:text="${std}">std 객체</li>	    			DTO 객체 넣은 상태
   <li th:text="${std.studentNo}">학번</li>			${객체.필드명} 호출 가능
   <li th:text="${std.name}">이름</li>
   <li th:text="${std.age}">나이</li>

   <ul th:object="${std}">					th:object로 객체 접근하면
     <li th:text="*{studentNo}">학번</li>			이후 *{필드명} 사용 가능
     <li th:text="*{name}">이름</li>
     <li th:text="*{age}">나이</li>
   </ul>

   <tr th:each="std : ${stdList}" th:object="${std}">		th:each 태그부터 반복
     <td th:text="*{studentNo}">학번</td>			th:object 사용 *{ }
     <td th:text="*{name}">이름</td>
     <td th:text="${std.age}">나이</td>			직접 추출 ${ }
   </tr>

   <li th:text="${param.inputAge}">제출된 나이</li>		쿼리스트링에 존재하는 param 추출

   <li th:text="${param.color}">체크된 색상</li>			같은 name 속성 여러개면 배열로 전달
   <li th:each="c : ${param.color}" th:text="${c}"> 선택된 색상</li>

   <th:block th:text="${str}">str</th:block>			HTML 태그 해석 X
   <th:block th:utext="${str}">str</th:block>			HTML 태그 해석 O

   <p th:text="|th:text의 str => ${str}|"></p>			변수에 저장된 값 아닌 문자열 출력가능!
   <p> 입력 받은 이름 : [[${param.inputName}]]</p>		태그 안에 직접 작성하는 경우

   <h1>messages.properties 값 출력하기</h1>			src/main/resources/messages.properties 참고
   <h3 th:text="#{app.name}">앱 이름</h3>			
   <img th:src="#{user.default.image}" alt="고양이1">

   <a th:href="@{/board(key=${key}, query=${query})}"></a>	/board?key=제목&query=검색어
   <a th:href="@{/example/ex3/{number}(number=${boardNo})}">	/example/ex3/10

   <ul>							PathVariable : 주소 중 일부분을 변수값처럼 사용
     <li><a href="/example/ex3/1">/example/ex3/1</a></li>	ExampleController 참고(domoProject2)
     <li><a href="/example/ex3/2">/example/ex3/2</a></li>	@GetMapping("ex3/{number}")
     <li><a href="/example/ex3/3">/example/ex3/3</a></li>	@PathVariable("number") int number
   </ul>

   <th:block th:if="${std == null}">				th:if 사용법1
     <h4>std 없음</h4>
   </th:block>
   <th:block th:unless="${std == null}">			th:unless 사용법1
     <h4 th:text="|std있음!!! ${std}|">std 있음!!!</h4>
   </th:block>

   <h4 th:if="${std}">std 있음!!!</h4>				th:if 사용법2 (조건식에 변수명 하나만)
   <h3 th:unless="${std}">std 없음...</h3>			th:unless 사용법2

   <th:block th:switch="${num}">				th:switch
     <h4 th:case="100">100이다~~</h4>			th:case
     <h4 th:case="200">200이다~~</h4>			th:case
     <h4 th:case="300">300이다~~</h4>			th:case
     <h4 th:case="*">나머지...</h4>				default 나머지의 경우
   </th:block>

   <h4 th:text="${std.age==30} ? '서른' : '서른 아님'"></h4>	삼항 연산자 사용법(""이미 있어서 안에는 '')
   <p th:text="${member} ?: '회원 데이터 없음'"></p>		Elvis 연산자 ( ?: )
   <p th:text="${member} ?: _">회원 데이터 없음</p>		No-Operation 연산자 ( ?: _ )
   <h4 th:classappend="red">th:classappend 테스트중...</h4>	요소에 class 속성값을 동적으로 추가
   <h4 class="red" th:classappend="deco">th:classappend 테스트중...</h4>

        <!--
          lt (less than)    :  < 기호
          gt (greater than) :  > 기호
       -->
   <!-- th:class 는 기존의 class를 모두 갈아낌! -->
   <h4 class="deco" th:class="${num1 gt 10000} ? green : red">th:classappend 테스트중...</h4>

   <h4 th:text="${member?.memberNo}">학번</h4>		안전 탐색 연산자 ${객체?.필드명}
   <h4 th:text="${std?.studentNo}">학번</h4>			객체가 null 인지 판단 후 null 이 아닐 때 수행

   타임리프 반복문 th:each는 향상된 for 문으로 일반 for믄 동작을 못하므로, 이하 번호발생기 사용
   <h3> ${#numbers.sequence(시작, 끝 [,step])} : 번호 발생기</h3>
   <ul>						11부터 시작해서 20까지 2씩 증가하며 li 태그 출력
     <li th:each="i : ${#numbers.sequence(11, 20, 2)}" th:text="|테스트 ${i}|"></li>
   </ul>

        <!-- data-* 속성 (*에는 자유작성) (태그 안에 있어야 함)
          - 데이터에 대한 확장성을 고려하여 설계된 속성
          - js 에서 요소.dataset 을 이용해 해당 값을 얻어와 사용 가능
          - html 작성할땐 -를 이용하고, JS에서는 CamelCase으로 자동으로 변경해줌
          (GET 방식이면 쿼리스트링에서 얻어올 수도 있음)
        -->
   <button th:data-todo-no="${todo.todoNo}">완료 여부</button>	HTML -> JS로 값 가져오려는 경우

   <script th:inline="javascript">				타임리프에서 JS 코드를 동적으로 처리 지원
     const message = /*[[${message}]]*/ "message 값";
     const num1 = /*[[${num1}]]*/ 100;
     document.querySelector("#message").innerText = message;
     document.querySelector("#num1").innerText = num1;
   </script>

   <th:block th:replace="~{fragments/temp :: temp2}"></th:block>
   <th:block th:replace="~{fragments/footer}"></th:block>
    (classpath:/templates/ @@@ .html) / :: 이후에는 th:fragment="temp2" 로 작성된 경우임)
└-----------------------------------------------------------------------------------------------┘

  3. static : 정적 resources를 모아두는 폴더
    (1) css
    (2) js
    (3) images

  4. application.properties : 프로젝트 진행할 때 기본적인 세팅 정보 모음
┌-----------application.properties 코드 모음--------------------------------------------------------┐
   spring.application.name=todoList				# application 이름
   server.port=80						# HTTP 기본 포트번호인 80으로 변경

   # Spring DevTools (자동 리로드, 서버 재시작 등) 설정
   spring.devtools.livereload.enabled=true			# 브라우저 자동 새로고침 기능
   spring.devtools.restart.enabled=true			# 코드 변경 시 서버 자동 재시작
   spring.thymeleaf.cache=false				# 타임리프 캐시 비활성화

   logging.level.edu.kh.todo=debug				# 로그 레벨 지정
   server.servlet.session.tracking-modes=cookie			# URL에 jsessionid 노출 방지
└-----------------------------------------------------------------------------------------------------┘

  5. config.properties : github에 올리지 않는 정보 모음
┌------------config.properties 코드 모음------------------------------------------------------------┐
   #오라클 DB 연결 정보
   spring.datasource.hikari.driver-class-name=oracle.jdbc.driver.OracleDriver
   spring.datasource.hikari.jdbc-url=jdbc:oracle:thin:@IP주소:포트번호:DB이름
   spring.datasource.hikari.username=계정명
   spring.datasource.hikari.password=비밀번호

   # HikariCP Connection Pool Properties			
   spring.datasource.hikari.connection-timeout=30000		# 최대 대기시간 (필수 설정)
   spring.datasource.hikari.maximum-pool-size=5		# 풀의 최대 연결 수
   spring.datasource.hikari.idle-timeout=600000			# 유후연결이 풀에 유지될 수 있는 최대 시간
   spring.datasource.hikari.pool-name=MyHikariCP		# 연결 풀의 이름 지정
   spring.datasource.hikari.auto-commit=false			# 자동 커밋 끄기
└-----------------------------------------------------------------------------------------------------┘

  6. mybatis-config.xml : Java와 DB 간 호환(Null, 표기법) (초기세팅 시 XML -> XML Catalog에서 설정 필요)
┌----------mybatis-config.xml 코드 모음------------------------------------------------------------┐
   <?xml version="1.0" encoding="UTF-8"?>
   <!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd" >
   <configuration>
     <settings>
       <setting name="jdbcTypeForNull" value="NULL" />			NULL 값( 참조주소 없음 <-> 값 없음 )
       <setting name="mapUnderscoreToCamelCase" value="true" />	표기법( _ <-> CamelCase )
     </settings>
   </configuration>
└-----------------------------------------------------------------------------------------------------┘

(★) src/test/java
(★) build.gradle
(★) 그 외...